using CorrelationId.Abstractions;
using Microsoft.Extensions.Logging;
using PVAD.RequestId.Abstractions;
using PVAD.Vms.Core.DTOs.Outbox;
using PVAD.Vms.Core.Interfaces;
using PVAD.Vms.Core.Interfaces.Messaging;
using PVAD.Vms.Infrastructure.Extensions;
using PVAD.Vms.Infrastructure.Messaging;
using System.Text.Json;

namespace PVAD.Vms.Infrastructure.Services;

public class OutboxMessageBuildService : IOutboxMessageBuilderService
{
    private readonly ILogger<OutboxMessageBuildService> _logger;
    private readonly ICorrelationContextAccessor _correlationContextAccessor;
    private readonly IRequestContextAccessor _requestContextAccessor;

    public OutboxMessageBuildService(
        ILogger<OutboxMessageBuildService> logger,
        ICorrelationContextAccessor correlationContextAccessor,
        IRequestContextAccessor requestContextAccessor
        )
    {
        _logger = logger;
        _correlationContextAccessor = correlationContextAccessor;
        _requestContextAccessor = requestContextAccessor;
    }

    public IEnumerable<OutboxMessageDto> Build(IEnumerable<IEvent> eventSource)
    {
        var outboxMessages = new List<OutboxMessageDto>();

        if (eventSource == null || !eventSource.Any())
            return outboxMessages;

        foreach (var @event in eventSource)
        {       
            outboxMessages.Add(new OutboxMessageDto
            {
                Id = @event.Id,
                CreationDate = @event.CreationDate,
                Content = JsonSerializer.SerializeToDocument(@event, @event.GetType()),
                ContentType = @event.GetType().Name,
                CorrelationId = _correlationContextAccessor.GetXCorrelationId(),
                RequestId = _requestContextAccessor.GetXRequestId()
            });
            _logger.LogDebug("The event type is {tp} added to outbox collection.", @event.GetType().Name);
        }

        return outboxMessages;
    }
}
