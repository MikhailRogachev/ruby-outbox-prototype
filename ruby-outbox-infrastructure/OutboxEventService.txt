using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using PVAD.Vms.Core.Interfaces;

namespace PVAD.Vms.Infrastructure.Messaging.OutboxEvent;

public class OutboxEventService : BackgroundService
{
    private readonly ILogger<OutboxEventService> _logger;
    private readonly IServiceProvider _serviceProvider;
    private readonly IOptions<OutboxMessageOptions> _options;

    public OutboxEventService(
        IServiceProvider serviceProvider,
        IOptions<OutboxMessageOptions> options,
        ILogger<OutboxEventService> logger
        )
    {
        _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _options = options ?? throw new ArgumentNullException(nameof(options));
    }

    private int RequestTimeout => _options.Value.ScanIntervalMs;

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("{time} The Outbox Service is starting.", DateTime.UtcNow);

        stoppingToken.Register(() => _logger.LogInformation("{time} Cancelling the Outbox Service due to host shutdown", DateTime.UtcNow));

        using (IServiceScope scope = _serviceProvider.CreateScope())
        {
            IOutboxEventPublisher publisher = scope.ServiceProvider.GetService<IOutboxEventPublisher>()!;

            while (!stoppingToken.IsCancellationRequested)
            {
                await publisher.RunAsync();
                await Task.Delay(RequestTimeout, stoppingToken);
            }
        }
    }
}
