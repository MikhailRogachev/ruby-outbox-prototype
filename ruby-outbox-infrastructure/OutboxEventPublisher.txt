using CorrelationId;
using CorrelationId.Abstractions;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using PVAD.RequestId;
using PVAD.RequestId.Abstractions;
using PVAD.Vms.Core.Interfaces;
using PVAD.Vms.Core.Interfaces.Messaging;
using PVAD.Vms.Infrastructure.Extensions;
using PVAD.Vms.Infrastructure.Persistency.Domain;
using Serilog.Context;
using System.Text.Json;

namespace PVAD.Vms.Infrastructure.Messaging.OutboxEvent;

public class OutboxEventPublisher : IOutboxEventPublisher
{
    private readonly VmsDbContext _context;
    private readonly IEventBus _eventBus;
    private readonly ILogger<OutboxEventPublisher> _logger;
    private readonly OutboxCircuitBreakerPolicy _breakerPolicy;
    private readonly ICorrelationContextAccessor _correlationContextAccessor;
    private readonly ICorrelationContextFactory _correlationContextFactory;
    private readonly IRequestContextAccessor _requestContextAccessor;
    private readonly IRequestContextFactory _requestContextFactory;

    private Dictionary<string, Type> _types = new Dictionary<string, Type>();

    private readonly string sqlquery = @"select om.""Id"",
            om.""Content"",
            om.""ContentType"",
            om.""CreationDate"",
            om.""CorrelationId"",
            om.""RequestId""
        from public.""OutboxMessages"" om
        order by om.""CreationDate""
        limit 1
        for update skip locked";

    public OutboxEventPublisher(
        VmsDbContext context,
        IEventBus eventBus,
        OutboxCircuitBreakerPolicy breakerPolicy,
        ILogger<OutboxEventPublisher> logger,
        ICorrelationContextAccessor correlationContextAccessor,
        ICorrelationContextFactory correlationContextFactory,
        IRequestContextAccessor requestContextAccessor,
        IRequestContextFactory requestContextFactory
        )
    {
        _eventBus = eventBus ?? throw new ArgumentNullException(nameof(eventBus));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _context = context ?? throw new ArgumentNullException(nameof(context));
        _breakerPolicy = breakerPolicy ?? throw new ArgumentNullException(nameof(breakerPolicy));

        _correlationContextAccessor = correlationContextAccessor;
        _requestContextAccessor = requestContextAccessor;
        _correlationContextFactory = correlationContextFactory;
        _requestContextFactory = requestContextFactory;
    }

    public async Task RunAsync()
    {
        await _breakerPolicy.ExecuteAsync(async () =>
        {
            await using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                var message = await _context.OutboxMessages
               .FromSqlRaw(sqlquery)
               .FirstOrDefaultAsync();

                if (message == null)
                {
                    _logger.LogDebug("There is no any messages found.");
                    return;
                }

                // add correlation and request id to header
                _correlationContextAccessor.CorrelationContext = _correlationContextFactory.Create(message.CorrelationId, BasicPropertiesExtensions.HeaderCorrelationKey);
                _requestContextAccessor.RequestContext = _requestContextFactory.Create(message.RequestId, BasicPropertiesExtensions.HeaderRequestKey);

                using (_logger.BeginScope(new Dictionary<string, object>()
                {
                    { BasicPropertiesExtensions.LogRequestKey, message.RequestId },
                    { BasicPropertiesExtensions.LogCorrelationKey, message.CorrelationId },
                }))
                {

                    Type type = TryGetType(message.ContentType);
                    var @event = JsonSerializer.Deserialize(message.Content, type);

                    _eventBus.Publish((IEvent)@event!);

                    _context.OutboxMessages.Remove(message);
                    _ = await _context.SaveChangesAsync();

                    await transaction.CommitAsync();

                    _logger.LogDebug("Message Id {id}, correlationId {cid} has been processed.", message.Id, message.CorrelationId);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                await transaction.RollbackAsync();
            }
        });
    }

    private Type TryGetType(string typeName)
    {
        if (!_types.TryGetValue(typeName, out var type))
        {
            var assembly = AppDomain.CurrentDomain.GetAssemblies()
                .FirstOrDefault(a => a.GetName().Name == typeof(IEvent).Assembly.GetName().Name);

            if (assembly != null)
            {
                type = assembly.GetTypes().FirstOrDefault(p => p.Name == typeName);
            }

            if (type == null)
                throw new InvalidOperationException($"Not able to recognize the type {typeName}.");

            _types.Add(typeName, type);
        }

        return type;
    }
}
